{"version":3,"sources":["kelly_criterion_client/router.cljs"],"mappings":";AAIA,uCAAA,2CAAA,OAAA,oDAAA,oBAAA,iEAAA,sBAAA,oEAAA,WAAA,mEAAA,kBAAA,8DAAA,oBAAA,iEAAA,+CAAA,qEAAA,GAAA,tqBAAKA;AAWL,wCAAA,xCAAMC,wFAASC;AAAf,AACE,AAACC,qGAAID;;AACL,kBAAKE;AAAL,AACE,AAACD,qGAAIC;;AACL,IAAAC,UAAwCH;IAAxCI,YAAAD;IAAAE,YAAA,AAAAC,cAAAF;IAAAG,cAAA,AAAAC,gBAAAH;IAAAA,gBAAA,AAAAI,eAAAJ;kBAAAE,dAAQa;uBAARf,nBAAsBgB;IAAtBX,UACkD,0EAAA,1EAACc,mDAAU,AAAChB,gBAAMN;IADpES,YAAAD;IAAAE,YAAA,AAAAN,cAAAK;IAAAE,cAAA,AAAAL,gBAAAI;IAAAA,gBAAA,AAAAH,eAAAG;sBAAAC,lBACQS;6BADRV,zBAC0BW;AAD1B,AAAA,IAAApB,cAAAA;IAAAO,cAAAA;;AAAA,AAAA,IAAAI,YAAAX;IAAAY,YAAA,AAAAT,cAAAQ;IAAAE,cAAA,AAAAR,gBAAAO;IAAAA,gBAAA,AAAAN,eAAAM;sBAAAC,lBAAQI;2BAARL,vBAAsBM;IAAtBJ,YAAAP;IAAAQ,YAAA,AAAAZ,cAAAW;IAAAE,cAAA,AAAAX,gBAAAU;IAAAA,gBAAA,AAAAT,eAAAS;0BAAAC,tBACQG;iCADRJ,7BAC0BK;AAD1B,AAEE,GAAI,EAAK,oBAAA,nBAAMH,8BAAa,6CAAA,7CAACK,iDAAI,AAACC,gBAAMH;AAAxC,0FACG,AAACI,cAAI3B,YAAYE;;AAClB,GAAI,EAAI,kFAAA,lFAACuB,6CAAE,AAACjB,gBAAMc,+BAAsB,AAACG,6CAAEL,gBAAYE;AACrD,cAAOD;cAAiBE;;;;;AAD1B;;;;;;;AAKR,4CAAA,5CAAMK,gGAAa5B;AAAnB,AACE,OAAC6B,eAAK,AAAC9B,sCAAQC,YAAY,AAAC2B,cAAI7B;;AAGlC,mDAAA,nDAAMgC,8GAAoBC,aAAa/B;AAAvC,AACE,sDAAA,WAAAgC,gBAAAC,1EAACC;AAAD,AAAS,qDAAAF,9CAACG,8DAAS,AAACC,8CAAMC,cAAI,AAACC,kDAAU,AAACC,eAAK,gBAAAN,hBAACzB,oCAAa,iBAAAyB,jBAACO;GAA9D,mCACQ,+CAAA,WAAAC,1DAACC;AAAD,AAAS,sFAAA,/EAACjB,6CAAE,iBAAAgB,jBAACE;GAAe,AAACC,4CAAIC,eAAK,+CAAA,/CAACC,iFAAWf,aAAa/B;;AAEzE,2CAAA,3CAAM+C,8FAAYC;AAAlB,AACE,IAAMC,SAAO,AAACrB,0CAAY,AAACW,eAAK,qUAAA,rUAACf,mDAAU,EAAI,sJAAA,tJAACC,6CAAE,AAACyB,kDAAS,6CAAA,7CAACC,iDAAOH,kBAAiB,AAACE,kDAAS,6CAAA,7CAACE,iDAAOJ,MAAMA;AAA7G,AACE,IAAMhD,aAAW,AAACQ,gBAAMyC;IAClBlB,eAAa,6FAAA,7FAACP,mDAAU,AAAChB,gBAAM,AAACgC,iBAAOS;IACvCI,SAAO,AAACb,iBAAO,AAACA,iBAAOS;AAF7B,AAGE,sIAAA,iHAAA,hPAACd,qDAAM,AAACL,iDAAmBC,aAAa/B,oEAC9BqD,2GACHL;;AAEb","names":["kelly-criterion-client.router/routes","kelly-criterion-client.router/matches","url-pieces","cljs.core.prn","route","G__6164","vec__6166","seq__6167","cljs.core/seq","first__6168","cljs.core/first","cljs.core/next","G__6165","vec__6169","seq__6170","first__6171","vec__6172","seq__6173","first__6174","vec__6175","seq__6176","first__6177","first-piece","remaining-pieces","first-remaining","remaining-route-pieces","clojure.string.split","cljs.core._EQ_","cljs.core/count","cljs.core/vec","kelly-criterion-client.router/first-match","cljs.core/some","kelly-criterion-client.router/matched-url-to-map","route-pieces","p1__6179#","p2__6180#","cljs.core.reduce","cljs.core.assoc","cljs.core.apply","cljs.core/str","cljs.core.drop_last","cljs.core/rest","cljs.core/second","p1__6181#","cljs.core.filter","cljs.core/ffirst","cljs.core.map","cljs.core/conj","cljs.core.repeat","kelly-criterion-client.router/decode-url","url","pieces","clojure.string.join","cljs.core.take","cljs.core.drop","target"],"sourcesContent":["(ns kelly-criterion-client.router\n  (:require [clojure.string :as str])\n  )\n\n(def routes {\n             \"home\"                :home\n             \"workouts/erg/{id}\"   :ergWorkout\n             \"workouts/water/{id}\" :waterWorkout\n             \"workouts\"            :workoutList\n             \"splits/erg/{id}\"     :ergSplit\n             \"splits/water/{id}\"   :waterSplit\n             \"splits/water/{id}/test/{abc}/otherTest/{efg}\"   :multipleVars\n             \"\"                    :home\n             })\n\n(defn matches [url-pieces]\n  (prn url-pieces)\n  (fn [route]\n    (prn route)\n    (loop [[first-piece & remaining-pieces] url-pieces\n           [first-remaining & remaining-route-pieces] (str/split (first route) #\"/\")]\n      (if (and (nil? first-piece) (= 0 (count remaining-route-pieces)))\n        [(vec url-pieces) route]\n        (if (or (= (first first-remaining) \"{\") (= first-piece first-remaining))\n          (recur remaining-pieces remaining-route-pieces)\n          nil))\n      )))\n\n(defn first-match [url-pieces]\n  (some (matches url-pieces) (vec routes))\n)\n\n(defn matched-url-to-map [route-pieces url-pieces]\n  (reduce #(assoc %1 (apply str (drop-last (rest (first %2)))) (second %2)) {}\n          (filter #(= (ffirst %) \"{\") (map conj (repeat []) route-pieces url-pieces))))\n\n(defn decode-url [url]\n  (let [pieces (first-match (rest (str/split (if (= (str/join (take 7 url)) \"http://\") (str/join (drop 7 url)) url) #\"/\")))]\n    (let [url-pieces (first pieces)\n          route-pieces (str/split (first (second pieces)) #\"/\")\n          target (second (second pieces))]\n      (assoc (matched-url-to-map route-pieces url-pieces)\n        :target target\n        :url url))))\n\n(comment\n  \"A helpful set of REPL snippets\"\n  []\n  (def url \"http://localhost:8020/workouts/erg/2\")\n  (def url \"localhost:8020/workouts/erg/2\")\n  (def url-pieces [\"workouts\" \"erg\" \"2\"])\n  (def route-pieces [\"workouts\" \"erg\" \"{id}\"])\n  (def url \"localhost:8020/splits/water/2/test/ABCDEF/otherTest/9001\")\n  (def first-remaining \"workouts\")\n  (def first-remaining \"splits\")\n  (def first-remaining \"{id}\")\n  (def first-piece \"workouts\")\n  (def first-piece \"splits\")\n  (def url \"localhost:8020/workouts/erg/2\")\n)"]}