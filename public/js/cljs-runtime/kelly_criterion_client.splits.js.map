{"version":3,"sources":["kelly_criterion_client/splits.cljs"],"mappings":";AAEA,sCAAA,tCAAKA;AACL,kCAAA,lCAAKC;AAEL,yCAAA,zCAAMC,0FAAUC,IAAIC;AAApB,AACE,GAAM,CAAGD,MAAI,AAACE,gBAAM,AAACC,gBAAM,qBAAA,WAAAC,hCAACC;AAAD,AAAa,uDAAA,IAAAD,pDAACE;GAAYL;AAC/C,QAAA,gDAAS,iBAAAM,UAAU,OAAA,NAAKP;IAAfQ,UAAoBP;AAApB,AAAA,oJAAAM,QAAAC,4DAAAD,QAAAC,xNAACT,uEAAAA,wFAAAA;;;AADhB,AAEYE;;;;AAGd,uCAAA,vCAAMQ,sFAAQR;AAAd,AACE,4EAAA,xBAAK,AAACS,WAAW,KAAA,JAAGT,4DAAW,uCAAA,vCAACF,2CAAW,sCAAA,tCAAU,AAACY,OAAU,gBAAA,hBAACC,cAAIX;;AAEvE,6CAAA,7CAAMY,kGAAcC;AAApB,AACE,IAAMb,IAAE,CAAA,QAAO,AAACc,UAAU,CAAA,MAAQD;AAAlC,AACa,GAAM,gDAAA,hDAACR,oDAAOQ;AACV,OAACL,qCAAOR;;AADZ,AAAA;;;;AAIf,AAAA,oDAAA,4DAAAe,hHAAME;AAAN,AAAA,IAAAD,UAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kFAAA,lFAAMD,6FACFjB;AADJ,AAEE,QAAA,MAAQ,qBAAA,rBAACmB,SAAS,KAAA,JAAGnB;;;AAFvB,CAAA,kFAAA,lFAAMiB,6FAGFG,SAASC;AAHb,AAIE,QAAGD,WAAS,YAAA,XAAGC;;;AAJjB,CAAA,4EAAA,5EAAMJ;;AAAN,AAMA,0CAAA,1CAAMK,4FAAWC;AAAjB,AACE,AAACC,qGAAI,CAAA,4DAAqBD;;AAC1B,GAAI,EAAI,gGAAA,/FAAM,AAAA,qFAAQA,qBAAQ,6CAAA,7CAACE,iDAAI,AAAA,qFAAQF;AACzC,2DAAA,pDAACG,8CAAMH,6DAAa,AAACI,gFAAoB,AAAA,2FAAWJ,OAAO,AAAA,4FAAWA;;AACtEA","names":["kelly-criterion-client.splits/power","kelly-criterion-client.splits/s","kelly-criterion-client.splits/left-pad","qty","s","cljs.core/count","cljs.core/first","p1__6145#","cljs.core/split-with","cljs.core.not_EQ_","G__6150","G__6151","kelly-criterion-client.splits/toTime","Math/floor","js/Number","cljs.core/rem","kelly-criterion-client.splits/powerToSplit","power","Math/cbrt","var_args","G__6163","kelly-criterion-client.splits/splitSecondsToPower","js/Error","Math/pow","duration","distance","kelly-criterion-client.splits/add-power","split","cljs.core.prn","cljs.core._EQ_","cljs.core.assoc","kelly_criterion_client.splits.splitSecondsToPower"],"sourcesContent":["(ns kelly-criterion-client.splits)\n\n(def power 200)\n(def s \"135.25\")\n\n(defn left-pad [qty s]\n  (cond (> qty (count (first (split-with #(not= \".\" %) s))))\n        (str \"0\" (left-pad (dec qty) s))\n        :else s\n        ))\n\n(defn toTime [s]\n  (str (Math/floor (/ s 60)) \":\" (left-pad 2 (.toFixed (js/Number (rem s 60)) 1))))\n\n(defn powerToSplit [power]\n  (let [s (* 500 (Math/cbrt (/ 2.80 power)))]\n               (cond (not= 0 power)\n                   (toTime s)\n                   :else \"0:00.0\")))\n\n(defn splitSecondsToPower\n  ([s]\n  (/ 2.80 (Math/pow (/ s 500) 3)))\n  ([duration distance]\n  (/ duration (/ distance 500))))\n\n(defn add-power [split]\n  (prn (str \"add-power :: \" split))\n  (if (or (nil? (:power split)) (= 0 (:power split)))\n    (assoc split :power (splitSecondsToPower (:duration split) (:distance split)))\n    split))"]}