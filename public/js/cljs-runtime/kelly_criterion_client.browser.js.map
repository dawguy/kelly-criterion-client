{"version":3,"sources":["kelly_criterion_client/browser.cljs"],"mappings":"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","names":["js/kelly-criterion-client","js/kelly-criterion-client.browser","js/kelly-criterion-client.browser.app-db","kelly-criterion-client.browser/app-db","reagent.core.atom","js/kelly-criterion-client.browser.saved-response","kelly-criterion-client.browser/saved-response","kelly-criterion-client.browser/start","reagent.dom.render","kelly-criterion-client.views/mainPage","js/document.getElementById","kelly-criterion-client.browser/save-data","vals","table-name","pk","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.assoc","G__26746","cljs.core/deref","kelly-criterion-client.browser/data-to-pk-list","data","list-target-id","target-id","cljs.core.map","var_args","G__26748","kelly-criterion-client.browser/save-list","js/Error","kelly_criterion_client.browser.save_list","cljs.core/identity","transform-func","cljs.core.prn","seq__26749","cljs.core/seq","chunk__26750","count__26751","i__26752","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","target-data","kelly-criterion-client.browser/retrieve-erg-workout","response","erg-workout","cljs.core/reset!","kelly-criterion-client.splits/add-power","kelly-criterion-client.browser/retrieve-water-workout","seq__26753","chunk__26754","count__26755","i__26756","water-split","kelly-criterion-client.browser/get-request","callback","url","c__26491__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26492__auto__","switch__26421__auto__","state_26768","state_val_26769","inst_26757","inst_26758","inst_26759","inst_26760","cljs.core/PersistentHashMap","inst_26761","inst_26762","inst_26763","cljs.core.async.impl.ioc-helpers/take!","inst_26765","inst_26766","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26770","state-machine__26422__auto__","ret-value__26423__auto__","result__26424__auto__","cljs.core/keyword-identical?","ex__26425__auto__","e26771","statearr-26772","statearr-26773","state__26493__auto__","statearr-26774","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","kelly-criterion-client.browser/send-request","target","G__26775","cljs.core/Keyword","cljs.core.get","kelly-criterion-client.browser/retrieve-workout-list","kelly-criterion-client.browser/match-url","kelly-criterion-client.router/decode-url","js/window","js/kelly-criterion-client.browser.initial-load","kelly-criterion-client.browser/initial-load","kelly-criterion-client.browser/init","kelly-criterion-client.browser/stop","js/console.log"],"sourcesContent":["(ns kelly-criterion-client.browser\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [kelly-criterion-client.views :as views]\n            [kelly-criterion-client.router :as router]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defonce app-db (r/atom {\n                         ; Temporary start\n                         :target :home\n                         ; Temporary end\n                         }))\n(defonce saved-response (r/atom {}))\n\n\n(defn ^:dev/after-load start []\n  (rdom/render (views/mainPage app-db) (js/document.getElementById \"app\"))\n  )\n\n; Seperated because splits are from workouts, not from the request :body\n(defn save-data [vals table-name pk]\n  ;(prn (str \"Saving to app-db \" table-name \" pk \" pk \" value \" vals))\n  (swap! app-db assoc table-name (assoc (table-name @app-db) pk vals))\n  )\n\n(defn data-to-pk-list [data list-target-id target-id]\n  (assoc data list-target-id (map target-id (list-target-id data)))\n  )\n\n(defn save-list\n  ([data list-target-id target-id]\n   (save-list data list-target-id target-id identity))\n  ([data list-target-id target-id transform-func]\n   (prn data)\n  (doseq [target-data (list-target-id data)]\n    (save-data (transform-func target-data) target-id (target-id target-data)))))\n\n(defn retrieve-erg-workout [response]\n  (let [erg-workout (:body response)]\n    (reset! saved-response erg-workout)\n    (save-list erg-workout :splits :ergSplit kelly-criterion-client.splits/add-power)\n    (save-data (data-to-pk-list erg-workout :splits :ergSplit) :ergWorkout (:ergWorkout erg-workout))\n    (swap! app-db assoc :target :ergWorkout)\n    (swap! app-db assoc :targetId (:ergWorkout erg-workout))\n  ))\n\n(defn retrieve-water-workout [response]\n  (let [vals (:body response)]\n    (prn vals)\n    (reset! saved-response vals)\n    (doseq [water-split (:splits vals)]\n      (save-list water-split :waterWorkoutAthleteSplits :waterWorkoutAthleteSplit)\n      (save-data (data-to-pk-list water-split :waterWorkoutAthleteSplits :waterWorkoutAthleteSplit) :waterSplit (:waterSplit water-split)))\n    (save-data (data-to-pk-list vals :splits :waterSplit) :waterWorkout (:waterWorkout vals))\n    (swap! app-db assoc :target :waterWorkout)\n    (swap! app-db assoc :targetId (:waterWorkout vals))\n    ))\n\n(defn get-request [callback url] (go (callback\n                                       (<! (http/get url {\n                                                          :headers           {\"Access-Control-Request-Method\" \"GET\"}\n                                                          :with-credentials? false})))))\n\n(defn send-request [target data]\n  (case target\n    :ergWorkout (get-request retrieve-erg-workout (str \"http://localhost:8080/workouts/erg/\" (get data \"id\")))\n    :waterWorkout (get-request retrieve-water-workout (str \"http://localhost:8080/workouts/water/\" (get data \"id\")))\n    :workoutList (get-request retrieve-workout-list (str \"http://localhost:8080/workouts\"))\n      \"default\"\n    ))\n\n(defn match-url []\n  (let [data (router/decode-url (.. js/window -location -href))]\n    (swap! app-db assoc :target (:target data))\n    (swap! app-db assoc :targetId nil)\n    (send-request (:target data) data))\n  )\n\n(defonce initial-load (match-url))\n\n(comment []\n         (go (retrieve-erg-workout\n               (<! (http/get \"http://localhost:8080/workouts/erg/1\" {\n                                                                     :headers           {\"Access-Control-Request-Method\" \"GET\"}\n                                                                     :with-credentials? false}))))\n         (go (retrieve-erg-workout\n               (<! (http/get \"http://localhost:8080/workouts/erg/7\" {\n                                                                     :headers           {\"Access-Control-Request-Method\" \"GET\"}\n                                                                     :with-credentials? false}))))\n\n         (go (retrieve-water-workout\n               (<! (http/get \"http://localhost:8080/workouts/water/11\" {\n                                                                     :headers           {\"Access-Control-Request-Method\" \"GET\"}\n                                                                     :with-credentials? false}))))\n         )\n\n\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))                                                  ;; TODO. Figure out why this isn't working\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop []\n  (js/console.log \"stop\"))\n\n(comment\n  \"Helpful data sets for the REPL\"\n  []\n  (def sample-response-workout {:waterWorkout 1, :date 1645506000000, :athlete 1, :assignedWorkout nil, :workout 1, :splits [{:ergSplit 2, :seq 0, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 3, :seq 1, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 51, :seq 2, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 52, :seq 3, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 53, :seq 4, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 54, :seq 5, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 55, :seq 6, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 56, :seq 7, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 68, :seq 8, :duration 100, :distance 1000, :heartRate 135, :power 200}], :name \"\"})\n  (def sample-response-splits [{:ergSplit 2, :seq 0, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 3, :seq 1, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 51, :seq 2, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 52, :seq 3, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 53, :seq 4, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 54, :seq 5, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 55, :seq 6, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 56, :seq 7, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 68, :seq 8, :duration 100, :distance 1000, :heartRate 135, :power 200}])\n  (def sample-response {:status 200, :success true, :body {:waterWorkout 1, :date 1645506000000, :athlete 1, :assignedWorkout nil, :workout 1, :splits [{:ergSplit 2, :seq 0, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 3, :seq 1, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 51, :seq 2, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 52, :seq 3, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 53, :seq 4, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 54, :seq 5, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 55, :seq 6, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 56, :seq 7, :duration 100, :distance 1000, :heartRate 135, :power 200} {:ergSplit 68, :seq 8, :duration 100, :distance 1000, :heartRate 135, :power 200}], :name \"\"}, :headers {\"content-type\" \"application/json\"}, :trace-redirects [\"http://localhost:8080/workouts/erg/1\" \"http://localhost:8080/workouts/erg/1\"], :error-code :no-error, :error-text \"\"})\n  (swap! app-db assoc :targetId 1)\n  (def split {:ergSplit 10, :seq 7, :duration 100, :distance 1000, :heartRate nil, :power nil})\n  (def k :splits)\n  (def k :waterWorkout)\n  (def sample-response-water-workout {:waterWorkout 11, :date 1646974800000, :boat 2, :assignedWorkout 2, :workout 11, :splits [{:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 111, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 80, :seq 0, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 112, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 81, :seq 1, :distance 500} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 113, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 82, :seq 2, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 114, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 83, :seq 3, :distance 250} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 115, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 84, :seq 4, :distance 250} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 116, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 85, :seq 6, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 117, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 86, :seq 7, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 118, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 87, :seq 8, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 119, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 88, :seq 9, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 120, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 89, :seq 10, :distance 1000} {:waterWorkoutAthleteSplits [{:waterWorkoutAthleteSplit 121, :athlete 1, :heartRate nil, :power nil}], :withFlow nil, :duration 100, :heartRate 0, :power 0, :flowRate nil, :waterSplit 90, :seq 11, :distance 1000}], :name \"\"})\n  )\n"]}