{"version":3,"sources":["kelly_criterion_client/graphs.cljs"],"mappings":";;AAGA,4CAAA,5CAAMA,gGAAaC;AAAnB,AACE,WAAA,PAAMC;IACCC,YAAU,AAACC,4CAAIC,gBAAMJ;IACrBK,mBAAiB,AAACF,4CAAIG,iBAAON;IAC7BO,IACI,AAACC,AACD,sDAAS,mDAAA,mFAAA,tIAACC,0IAAc,AAACC,8CAAMC,cAAIT,5PACnC,uRAAQ,mDAAA,mFAAA,tIAACO,0IAAcR;IAC3BW,IACI,AAACJ,AACD,sDAAS,mDAAA,nDAACC,sIAAY,iBAAAI,kBAAA,/NACtB;IADsBC,kBAAW,AAACJ,8CAAMK,cAAIV;AAAtB,AAAA,SAAAQ,kBAAAC,mBAAAD,kBAAAC;KAAyC,AAACJ,8CAAMC,cAAIN,kCAClE,mDAAA,wFAAA,3IAACI,sIAAYR;IACzBe,OACO,AAACC,AACD,0CAAI,WAAKC,rDACT;AADI,AAAQ,IAAAC,WAAG,AAACf,gBAAMc;AAAV,AAAA,0EAAAC,wBAAAA,1FAACZ,kCAAAA,4CAAAA;MACT,WAAKW;AAAL,AAAQ,IAAAE,WAAG,AAACd,iBAAOY;AAAX,AAAA,0EAAAE,wBAAAA,1FAACR,kCAAAA,4CAAAA;;AAd3B,AAAA,0FAAA,kDAAA,2CAAA,gSAAA,mFAAA,qDAAA,2CAAA,xZAgBa,6CAAA,KAAA,gDAAA,KAAA,sDAAA,NAAiBX,sDAASA,0PAGlC;AAAI,AAACoB,qGAAIrB;;AACL,QAACgB,qCAAAA,mDAAAA,hBAAKhB,+BAAAA;;CApBf,oDAAA,cAAA,yDAsBa,AAACI,gBAAMkB;;AAGtB,oDAAA,pDAAMC,gHAAqBC;AAA3B,AACE,IAAOC,IAAED;IACFE,IA8gFF,AAAAa;QA/gFL,JAEOZ;;AAFP,AAGE,GAAI,CAAA,MAAK,AAACC,gBAAMH;AACd,eAAO,AAACI,eAAKJ;eAAG,AAACK,eAAK,iEAAA,jEAACC,8CAAM,AAAC3B,gBAAMqB,iDAAM,CAAGE,IAAE,AAAA,mFAAO,AAACvB,gBAAMqB,MAAM,AAACK,eAAK,iEAAA,jEAACC,8CAAM,AAAC3B,gBAAMqB,iDAAME,GAAGD;eAAK,CAAGC,IAAE,AAAA,mFAAO,AAACvB,gBAAMqB;;;;;;AAExH,AAAI,AAACJ,qGAAIK;;AAAGA;;;;;AAElB,wCAAA,xCAAMM,wFAASR;AAAf,AACE,WAAA,PAAMvB;IACCgC,QAAM,4CAAA,5CAAC9B,iGAAUqB;IACjBU,UAAQ,4CAAA,5CAAC/B,qGAAYqB;IACrBjB,IACI,AAACC,AACD,sDAAS,mDAAA,mFAAA,IAAA,1IAACC,tDACV,oNAAQ,mDAAA,mFAAA,tIAACA,0IAAcR;IAC3BW,IACI,AAACJ,AACD,sDAAS,mDAAA,mFAAA,tIAACC,0IAAc,AAACC,8CAAMC,cAAIuB,5PACnC,qRAAQ,mDAAA,wFAAA,3IAACzB,sIAAYR;IACzBe,OACO,AAACC,AACD,0CAAI,WAAKkB,rDACT;AADI,AAAQ,IAAAC,WAAG,AAAA,4EAAID;AAAP,AAAA,0EAAAC,wBAAAA,1FAAC7B,kCAAAA,4CAAAA;MACT,WAAK4B;AAAL,AAAQ,IAAAE,WAAG,AAAA,uFAASF;AAAZ,AAAA,0EAAAE,wBAAAA,1FAACzB,kCAAAA,4CAAAA;;AAd3B,AAAA,0FAAA,kDAAA,2CAAA,gSAAA,mFAAA,qDAAA,2CAAA,xZAgBc,6CAAA,KAAA,gDAAA,KAAA,sDAAA,NAAiBX,sDAASA,0PAE/B,iBAAAqC,WAAM,AAACf,kDAAoBC;AAA3B,AAAA,gFAAAc,2BAAAA,nGAACtB,qCAAAA,+CAAAA;KAlBV,oDAAA,cAAA,yDAoBc,AAACZ,gBAAMkB;;AAGvB","names":["kelly-criterion-client.graphs/growth-rate","growth-rates","size","bet-sizes","cljs.core.map","cljs.core/first","bet-growth-rates","cljs.core/second","x","js/module$node_modules$d3$src$index.scaleLinear","cljs.core.into_array","cljs.core.apply","cljs.core/max","y","x__4336__auto__","y__4337__auto__","cljs.core/min","line","js/module$node_modules$d3$src$index.line","g","G__27840","G__27841","cljs.core.prn","js/module$node_modules$d3$src$index.schemeCategory10","kelly-criterion-client.graphs/add-starting-points","chances","l","r","s","cljs.core/count","cljs.core/rest","cljs.core/cons","cljs.core.assoc","kelly-criterion-client.graphs/chances","probs","payoffs","c","G__27842","G__27843","G__27844","cljs.core/PersistentVector"],"sourcesContent":["(ns kelly-criterion-client.graphs\n  (:require [d3 :as d3]))\n\n(defn growth-rate [growth-rates]\n  (let [size 300\n         bet-sizes (map first growth-rates)\n         bet-growth-rates (map second growth-rates)\n         x (->\n             (d3/scaleLinear)\n             (.domain (into-array [0 (apply max bet-sizes)]))\n             (.range (into-array [0 size])))\n         y (->\n             (d3/scaleLinear)\n             (.domain (into-array [(max -0.25 (apply min bet-growth-rates)) (apply max bet-growth-rates)]))\n             (.range (into-array [size 0])))\n         line (->\n                (d3/line)\n                (.x (fn [g] (x (first g))))\n                (.y (fn [g] (y (second g)))))]\n    [:svg\n     {:viewBox (str 0 \" \" 0 \" \" size \" \" size)}\n     [:path\n      {:d\n       (do (prn growth-rates)\n           (line growth-rates))\n       :fill   \"transparent\"\n       :stroke (first d3/schemeCategory10)}]\n     ]))\n\n(defn add-starting-points [chances]\n  (loop [l chances\n         r (vector)\n         s 0]\n    (if (< 0 (count l))\n      (recur (rest l) (cons (assoc (first l) :p (+ s (:prob (first l)))) (cons (assoc (first l) :p s) r))  (+ s (:prob (first l))))\n\n      (do (prn r) r))))\n\n(defn chances [chances]\n  (let [size 300\n         probs (map :prob chances)\n         payoffs (map :payout chances)\n         x (->\n             (d3/scaleLinear)\n             (.domain (into-array [0 1]))\n             (.range (into-array [0 size])))\n         y (->\n             (d3/scaleLinear)\n             (.domain (into-array [0 (apply max payoffs)]))\n             (.range (into-array [size 0])))\n         line (->\n                (d3/line)\n                (.x (fn [c] (x (:p c))))\n                (.y (fn [c] (y (:payout c)))))]\n     [:svg\n      {:viewBox (str 0 \" \" 0 \" \" size \" \" size)}\n      [:path\n       {:d (line (add-starting-points chances))\n        :fill \"transparent\"\n        :stroke (first d3/schemeCategory10)}]\n      ]))\n\n(comment [] \"\"\n       (def growth-rates (vector [0 0] [1 0.0014278419662850659] [2 0.002712672867895371] [3 0.003856313260782635] [4 0.0048604085139401405] [5 0.005726437236174664] [6 0.006455718780398259] [7 0.007049419909378081] [8 0.007508560695860415] [9 0.007834019720383688] [10 0.008026538621693766] [11 0.00808672604728402] [12 0.008015061045050523] [13 0.007811895931241347] [14 0.007477458664678513] [15 0.0070118547525416935] [16 0.006415068708748653] [17 0.0056869650820589035] [18 0.004827289067425661] [19 0.0038356667107440207] [20 0.0027116047139611743] [21 0.0014544898444678739] [22 0.0000635879497443842] [23 -0.0014619574246528544] [24 -0.0031231268185456795] [25 -0.004921027049692384] [26 -0.006856893826047733] [27 -0.008932094791344464] [28 -0.011148133020767143] [29 -0.013506650986803426] [30 -0.016009435018884022] [31 -0.01865842028420106] [32 -0.02145569632117844] [33 -0.02440351316151307] [34 -0.02750428808157082] [35 -0.030760613029283207] [36 -0.03417526277861929] [37 -0.03775120387030195] [38 -0.04149160440480121] [39 -0.04539984476188083] [40 -0.049479529330253014] [41 -0.05373449934135341] [42 -0.0581688469130926] [43 -0.06278693042286851] [44 -0.06759339134442416] [45 -0.07259317270058196] [46 -0.07779153930386917] [47 -0.08319409997997357] [48 -0.08880683199535983] [49 -0.09463610794083754] [50 -0.10068872535812334] [51 -0.10697193943737388] [52 -0.11349349916131674] [53 -0.12026168732727255] [54 -0.12728536494357595] [55 -0.13457402057357493] [56 -0.14213782529082097] [57 -0.14998769401612466] [58 -0.158135354134344] [59 -0.16659342244049313] [60 -0.17537549164642952] [61 -0.18449622789786418] [62 -0.19397148101530803] [63 -0.20381840949276953] [64 -0.21405562267840084] [65 -0.22470334303970213] [66 -0.23578359200527405] [67 -0.2473204036053318] [68 -0.259340071043246] [69 -0.2718714324717212] [70 -0.2849462036881234] [71 -0.2985993672954204] [72 -0.3128696302218006] [73 -0.3277999645218498] [74 -0.34343825032751785] [75 -0.35983804500142413] [76 -0.377059509424052] [77 -0.39517053156989584] [78 -0.4142481000347694] [79 -0.4343799973438731] [80 -0.4556669067471931] [81 -0.4782250598976677] [82 -0.5021896010911832] [83 -0.5277189141482311] [84 -0.5550002626284273] [85 -0.5842572528098163] [86 -0.6157598754364421] [87 -0.6498382754000072] [88 -0.6869020442460365] [89 -0.7274679272644359] [90 -0.7722007737595111] [91 -0.8219761368629444] [92 -0.8779798992142693] [93 -0.9418747737207472] [94 -1.0160960236815066] [95 -1.1044192458266513] [96 -1.2131698043572223] [97 -1.354205771494938] [98 -1.554149216816422] [99 -1.8979494743587078] [100 ##-Inf]))\n\n       )"]}