{"version":3,"sources":["kelly_criterion_client/graphs.cljs"],"mappings":"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","names":["kelly-criterion-client.graphs/power-profile","splits","size","durations","cljs.core.map","values","x","js/module$node_modules$d3$src$index.scaleLinear","cljs.core.into_array","cljs.core.apply","cljs.core/max","y","line","js/module$node_modules$d3$src$index.line","d","G__6152","G__6153","cljs.core/first","js/module$node_modules$d3$src$index.schemeCategory10","kelly-criterion-client.graphs/appendDurations","arr","rem","sum","cljs.core/count","helper","cljs.core.conj","cljs.core.assoc","cljs.core/rest","kelly-criterion-client.graphs/workout","s","powers","endPos","p1__6154#","cljs.core.int_array","p__6155","map__6178","cljs.core/--destructure-map","cljs.core.get","duration","power","seq","pos","cljs.core/random-uuid"],"sourcesContent":["(ns kelly-criterion-client.graphs\n  (:require [d3 :as d3]))\n\n(defn power-profile [splits]\n  (let\n    [size 300\n     durations (map :duration splits)\n     values (map :power splits)\n     x (->\n         (d3/scaleLinear)\n         (.domain (into-array [1 (apply max durations)]))\n         (.range (into-array [0 size])))\n     y (->\n         (d3/scaleLinear)\n         (.domain (into-array [0 (apply max values)]))\n         (.range (into-array [size 0])))\n     line (->\n            (d3/line)\n            (.x (fn [d] (x (:duration d))))\n            (.y (fn [d] (y (:power d)))))]\n    [:svg\n     {:viewBox (str 0 \" \" 0 \" \" size \" \" size)}\n     [:path\n      {:d (line splits),\n       :fill \"transparent\",\n       :stroke (first d3/schemeCategory10)}]]))\n\n(defn appendDurations [splits]\n  ((fn helper[arr rem sum]\n     (cond (< 1 (count rem))\n           (helper (conj arr (assoc (first rem) :pos sum)) (rest rem) (+ sum (:duration (first rem))))\n           :else (conj arr (assoc (first rem) :pos sum)))\n     ) [] splits 0))\n\n(defn workout [s]\n  (let\n    [splits (appendDurations s)\n     size 400\n     durations (map :duration splits)\n     powers (map :power splits)\n     endPos (map #(+ (:pos %) (:duration %)) splits)\n     y (->\n         (d3/scaleLinear)\n         (.domain (into-array [0 (apply max powers)]))\n         (.range (into-array [size 0])))\n     x (->\n         (d3/scaleLinear)\n         (.domain (into-array [0 (apply max endPos)]))    ;; Essentially the goal here is to maximize\n         (.range (int-array [0 size])))]\n    [:svg\n     {:viewBox (str \"0 0 \" size \" \" size)}\n     (map\n       (fn\n         [{:keys [duration power seq pos]}]\n         [:g\n          {:key (random-uuid)\n           :transform (str \"translate(\" (x pos) \",\" (y power) \")\")}\n          [:rect\n           {\n            :key (random-uuid)\n            :height (- size (y power)),\n            :width (x duration)}]]) splits)]))\n"]}