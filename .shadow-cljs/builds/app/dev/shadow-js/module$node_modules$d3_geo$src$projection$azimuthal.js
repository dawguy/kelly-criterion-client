["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-geo/src/projection/azimuthal.js"],"~:js","shadow$provide.module$node_modules$d3_geo$src$projection$azimuthal=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.azimuthalRaw=function(scale){return function(x,y){var cx=(0,_math.cos)(x),cy=(0,_math.cos)(y);cx=scale(cx*cy);return Infinity===cx?[2,0]:[cx*cy*(0,_math.sin)(x),cx*(0,_math.sin)(y)]}};exports.azimuthalInvert=function(angle){return function(x,y){var z=(0,_math.sqrt)(x*x+y*y),c=angle(z),sc=(0,_math.sin)(c);c=(0,_math.cos)(c);return[(0,_math.atan2)(x*\nsc,z*c),(0,_math.asin)(z&&y*sc/z)]}};var _math=require(\"module$node_modules$d3_geo$src$math\")}","~:source","shadow$provide[\"module$node_modules$d3_geo$src$projection$azimuthal\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.azimuthalRaw = azimuthalRaw;\nexports.azimuthalInvert = azimuthalInvert;\n\nvar _math = require(\"../math.js\");\n\nfunction azimuthalRaw(scale) {\n  return function (x, y) {\n    var cx = (0, _math.cos)(x),\n        cy = (0, _math.cos)(y),\n        k = scale(cx * cy);\n    if (k === Infinity) return [2, 0];\n    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];\n  };\n}\n\nfunction azimuthalInvert(angle) {\n  return function (x, y) {\n    var z = (0, _math.sqrt)(x * x + y * y),\n        c = angle(z),\n        sc = (0, _math.sin)(c),\n        cc = (0, _math.cos)(c);\n    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$d3_geo$src$math","~$shadow.js"]],"~:properties",["^5",["__esModule","azimuthalRaw","azimuthalInvert","value"]],"~:compiled-at",1653857611321,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_geo$src$projection$azimuthal.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAKAA,QAAqB,CAACC,KAAD,CAAQ,CAC3B,MAAO,SAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAAA,IACjBC,GAAK,GAAIC,KAAMC,CAAAA,GAAV,EAAeJ,CAAf,CADY,CAEjBK,GAAK,GAAIF,KAAMC,CAAAA,GAAV,EAAeH,CAAf,CACLK,GAAAA,CAAIP,KAAA,CAAMG,EAAN,CAAWG,EAAX,CACR,OAAUE,SAAV,GAAID,EAAJ,CAA2B,CAAC,CAAD,CAAI,CAAJ,CAA3B,CACO,CAACA,EAAD,CAAKD,EAAL,CAAU,GAAIF,KAAMK,CAAAA,GAAV,EAAeR,CAAf,CAAV,CAA6BM,EAA7B,CAAiC,GAAIH,KAAMK,CAAAA,GAAV,EAAeP,CAAf,CAAjC,CALc,CADI,CAJ7BP,QAAQe,CAAAA,eAAR,CAcAA,QAAwB,CAACC,KAAD,CAAQ,CAC9B,MAAO,SAAS,CAACV,CAAD,CAAIC,CAAJ,CAAO,CAAA,IACjBU,EAAI,GAAIR,KAAMS,CAAAA,IAAV,EAAgBZ,CAAhB,CAAoBA,CAApB,CAAwBC,CAAxB,CAA4BA,CAA5B,CADa,CAEjBY,EAAIH,KAAA,CAAMC,CAAN,CAFa,CAGjBG,GAAK,GAAIX,KAAMK,CAAAA,GAAV,EAAeK,CAAf,CACLE,EAAAA,CAAK,GAAIZ,KAAMC,CAAAA,GAAV,EAAeS,CAAf,CACT,OAAO,CAAC,GAAIV,KAAMa,CAAAA,KAAV,EAAiBhB,CAAjB;AAAqBc,EAArB,CAAyBH,CAAzB,CAA6BI,CAA7B,CAAD,CAAmC,GAAIZ,KAAMc,CAAAA,IAAV,EAAgBN,CAAhB,EAAqBV,CAArB,CAAyBa,EAAzB,CAA8BH,CAA9B,CAAnC,CALc,CADO,CAZhC,KAAIR,MAAQX,OAAA,CAAQ,qCAAR,CAToG;\",\n\"sources\":[\"node_modules/d3-geo/src/projection/azimuthal.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_geo$src$projection$azimuthal\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.azimuthalRaw = azimuthalRaw;\\nexports.azimuthalInvert = azimuthalInvert;\\n\\nvar _math = require(\\\"../math.js\\\");\\n\\nfunction azimuthalRaw(scale) {\\n  return function (x, y) {\\n    var cx = (0, _math.cos)(x),\\n        cy = (0, _math.cos)(y),\\n        k = scale(cx * cy);\\n    if (k === Infinity) return [2, 0];\\n    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];\\n  };\\n}\\n\\nfunction azimuthalInvert(angle) {\\n  return function (x, y) {\\n    var z = (0, _math.sqrt)(x * x + y * y),\\n        c = angle(z),\\n        sc = (0, _math.sin)(c),\\n        cc = (0, _math.cos)(c);\\n    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"azimuthalRaw\",\"scale\",\"x\",\"y\",\"cx\",\"_math\",\"cos\",\"cy\",\"k\",\"Infinity\",\"sin\",\"azimuthalInvert\",\"angle\",\"z\",\"sqrt\",\"c\",\"sc\",\"cc\",\"atan2\",\"asin\"]\n}\n"]