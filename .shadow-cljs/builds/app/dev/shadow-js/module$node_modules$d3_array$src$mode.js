["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-array/src/mode.js"],"~:js","shadow$provide.module$node_modules$d3_array$src$mode=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(values,valueof){const counts=new _internmap.InternMap;if(void 0===valueof)for(var value$jscomp$0 of values)null!=value$jscomp$0&&value$jscomp$0>=value$jscomp$0&&counts.set(value$jscomp$0,(counts.get(value$jscomp$0)||0)+1);else{value$jscomp$0=-1;for(let value of values)null!=(value=valueof(value,++value$jscomp$0,values))&&value>=\nvalue&&counts.set(value,(counts.get(value)||0)+1)}let modeValue;values=0;for(const [value,count]of counts)count>values&&(values=count,modeValue=value);return modeValue};var _internmap=require(\"module$node_modules$internmap$src$index\")}","~:source","shadow$provide[\"module$node_modules$d3_array$src$mode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mode;\n\nvar _internmap = require(\"internmap\");\n\nfunction mode(values, valueof) {\n  const counts = new _internmap.InternMap();\n\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n\n  let modeValue;\n  let modeCount = 0;\n\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n\n  return modeValue;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$internmap$src$index"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1653857611083,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_array$src$mode.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAIAC,QAAa,CAACC,MAAD,CAASC,OAAT,CAAkB,CAC7B,MAAMC,OAAS,IAAIC,UAAWC,CAAAA,SAE9B,IAAgBC,IAAAA,EAAhB,GAAIJ,OAAJ,CACE,IAAK,IAAIJ,cAAT,GAAkBG,OAAlB,CACe,IAAb,EAAIH,cAAJ,EAAqBA,cAArB,EAA8BA,cAA9B,EACEK,MAAOI,CAAAA,GAAP,CAAWT,cAAX,EAAmBK,MAAOK,CAAAA,GAAP,CAAWV,cAAX,CAAnB,EAAwC,CAAxC,EAA6C,CAA7C,CAHN,KAMO,CACDW,cAAAA,CAAQ,CAAC,CAEb,KAAK,IAAIX,KAAT,GAAkBG,OAAlB,CACmD,IAAjD,GAAKH,KAAL,CAAaI,OAAA,CAAQJ,KAAR,CAAe,EAAEW,cAAjB,CAAwBR,MAAxB,CAAb,GAAyDH,KAAzD;AAAkEA,KAAlE,EACEK,MAAOI,CAAAA,GAAP,CAAWT,KAAX,EAAmBK,MAAOK,CAAAA,GAAP,CAAWV,KAAX,CAAnB,EAAwC,CAAxC,EAA6C,CAA7C,CALC,CAUP,IAAIY,SACAC,OAAAA,CAAY,CAEhB,KAAK,MAAM,CAACb,KAAD,CAAQc,KAAR,CAAX,EAA6BT,OAA7B,CACMS,KAAJ,CAAYD,MAAZ,GACEA,MACA,CADYC,KACZ,CAAAF,SAAA,CAAYZ,KAFd,CAMF,OAAOY,UA7BsB,CAF/B,KAAIN,WAAaX,OAAA,CAAQ,yCAAR,CARiF;\",\n\"sources\":[\"node_modules/d3-array/src/mode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_array$src$mode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = mode;\\n\\nvar _internmap = require(\\\"internmap\\\");\\n\\nfunction mode(values, valueof) {\\n  const counts = new _internmap.InternMap();\\n\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value != null && value >= value) {\\n        counts.set(value, (counts.get(value) || 0) + 1);\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\\n        counts.set(value, (counts.get(value) || 0) + 1);\\n      }\\n    }\\n  }\\n\\n  let modeValue;\\n  let modeCount = 0;\\n\\n  for (const [value, count] of counts) {\\n    if (count > modeCount) {\\n      modeCount = count;\\n      modeValue = value;\\n    }\\n  }\\n\\n  return modeValue;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"mode\",\"values\",\"valueof\",\"counts\",\"_internmap\",\"InternMap\",\"undefined\",\"set\",\"get\",\"index\",\"modeValue\",\"modeCount\",\"count\"]\n}\n"]